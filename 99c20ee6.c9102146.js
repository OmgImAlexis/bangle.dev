(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{144:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(t),u=r,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return t?a.a.createElement(m,c(c({ref:n},s),{},{components:t})):a.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},97:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),o=(t(0),t(144)),i={title:"Keybindings",sidebar_label:"Keybindings"},c={unversionedId:"guides/keybindings",id:"guides/keybindings",isDocsHomePage:!1,title:"Keybindings",description:"Every Bangle components that support keybindings will",source:"@site/docs/guides/keybindings.md",slug:"/guides/keybindings",permalink:"/docs/guides/keybindings",editUrl:"https://github.com/kepta/bangle-play/edit/master/_bangle-website/docs/docs/guides/keybindings.md",version:"current",sidebar_label:"Keybindings",sidebar:"docs",previous:{title:"Commands",permalink:"/docs/guides/commands"},next:{title:"How do I?",permalink:"/docs/guides/how-do-i"}},l=[{value:"Adding custom keybindings",id:"adding-custom-keybindings",children:[]}],s={rightToc:l};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Every Bangle components that support keybindings will"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"accept a ",Object(o.b)("inlineCode",{parentName:"li"},"keybindings")," named parameter in its ",Object(o.b)("inlineCode",{parentName:"li"},"plugins()")," method."),Object(o.b)("li",{parentName:"ul"},"export ",Object(o.b)("inlineCode",{parentName:"li"},"defaultKeys")," object to get access to all the default keys.")),Object(o.b)("p",null,"In the example below we look at how to customize a keybindings for the\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/core#bold-component"}),"bold")," component."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { bold } from '@banglejs/core';\n\n// If you pass nothing the `bold.defaultKeys` keybindings will be used\nbold.plugins();\n\n// To override the toggleBold\nbold.plugins({\n  keybindings: {\n    toggleBold: 'Ctrl-d',\n  },\n});\n\n// To disable\nbold.plugins({\n  keybindings: {\n    toggleBold: null,\n  },\n});\n\n// Selectively modify one key\nbold.plugins({\n  keybindings: {\n    ...bold.defaultKeys,\n    toggleBold: 'Ctrl-d',\n  },\n});\n")),Object(o.b)("h3",{id:"adding-custom-keybindings"},"Adding custom keybindings"),Object(o.b)("p",null,"If you want to create your own keyboard sorcery you will need to use ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://prosemirror.net/docs/ref/#keymap"}),"Prosemirror.Keymap"),". Let us create\na ",Object(o.b)("inlineCode",{parentName:"p"},"Ctrl-s")," shortcut which shouts the text content whenever pressed."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { keymap } from '@banglejs/core/utils/keymap';\nimport { corePlugins, coreSpec } from '@banglejs/core/utils/core-components';\n\nconst state = new BangleEditorState({\n  plugins: [\n    keymap({\n      'Ctrl-s': (state, dispatch, view) => {\n        alert(state.doc.textContent);\n      },\n    }),\n    corePlugins(),\n  ],\n});\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The docs at ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://prosemirror.net/docs/ref/#keymap"}),"Prosemirror.Keymap")," go deeper into syntax.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"The nomenclature for key names is provided by ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/marijnh/w3c-keyname"}),"w3c-keyname"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If there are competing keybindings, the one that is defined first wins.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Since keymap accepts a {","[string]",": ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/api/core#command"}),"Command"),"} all the commands logic apply, for example, you\ncan return an early ",Object(o.b)("inlineCode",{parentName:"p"},"false")," to avoid handling the key event."))))}p.isMDXComponent=!0}}]);